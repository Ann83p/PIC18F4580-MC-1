#include <xc.h>
#include <string.h>

void cmd(unsigned char a);
void data(unsigned char a);
void display(const char *p);
unsigned char keypad(void);
void modifyPassword(void);

char pass[] = "1234";  // Default password
char inp[5];           // Array to store the input
unsigned char index = 0;

void main(void) {
    ADCON1 = 0X0F;  // Analog to digital pin configuration
    TRISB = 0XF0;   // Columns as outputs (Pull-down resistors)
    TRISC = TRISD = 0X00;

    cmd(0x38);  // 2 lines, 5x7 dots, 8-bit mode
    cmd(0x01);  // Clear display
    cmd(0x0f);  // Display on, cursor blinking
    cmd(0x80);  // Move cursor to the first line

    while(1){
        cmd(0x01);  // Clear display
        display("Enter Password:");
        cmd(0xc0);  // Move to the second line

        for(index = 0; index < 4; index++) {
            inp[index] = keypad();  // Save input
            data(inp[index]);        // Display input on LCD
            while(RB4==0 || RB5==0 || RB6==0 || RB7==0);
        }

        inp[4] = '\0';  // Null-terminate the input string

        if(strcmp(inp, pass) == 0) {
            cmd(0x01);
            display("Password Correct");
            for(long i = 0; i <= 100000; i++);

            // Prompt to modify password
            cmd(0x01);
            display("Change Password?");
            cmd(0xc0);
            display("Press * to Yes");

            if(keypad() == '*') {
                modifyPassword();
            }
        } else {
            cmd(0x01);
            display("Password Wrong");
            for(long i = 0; i <= 100000; i++);
        }
    }
    return;
}

void modifyPassword(void) {
    char newPass[5], confirmPass[5];

    // Enter old password again for verification
    cmd(0x01);
    display("Re-enter Old Pass:");
    cmd(0xc0);
    for(index = 0; index < 4; index++) {
        inp[index] = keypad();
        data(inp[index]);
        while(RB4 == 0 || RB5 == 0 || RB6 == 0 || RB7 == 0);
    }
    inp[4] = '\0';

    if(strcmp(inp, pass) != 0) {
        cmd(0x01);
        display("Wrong Password");
        for(long i = 0; i <= 100000; i++);
        return;
    }

    // Enter new password
    cmd(0x01);
    display("Enter New Pass:");
    cmd(0xc0);
    for(index = 0; index < 4; index++) {
        newPass[index] = keypad();
        data(newPass[index]);
        while(RB4 == 0 || RB5 == 0 || RB6 == 0 || RB7 == 0);
    }
    newPass[4] = '\0';

    // Confirm new password
    cmd(0x01);
    display("Confirm New Pass:");
    cmd(0xc0);
    for(index = 0; index < 4; index++) {
        confirmPass[index] = keypad();
        data(confirmPass[index]);
        while(RB4 == 0 || RB5 == 0 || RB6 == 0 || RB7 == 0);
    }
    confirmPass[4] = '\0';

    // Check if new password and confirm password match
    if(strcmp(newPass, confirmPass) == 0) {
        strcpy(pass, newPass);  // Update the password
        cmd(0x01);
        display("Password Updated");
    } else {
        cmd(0x01);
        display("Mismatch Error");
    }
    for(long i = 0; i <= 100000; i++);
}

unsigned char keypad(void) {
    while(1) {
        PORTB = 0X0E;
        if(RB4 == 0) return '1';
        if(RB5 == 0) return '2';
        if(RB6 == 0) return '3';
        if(RB7 == 0) return 'A';
        
        PORTB = 0X0D;
        if(RB4 == 0) return '4';
        if(RB5 == 0) return '5';
        if(RB6 == 0) return '6';
        if(RB7 == 0) return 'B';
        
        PORTB = 0X0B;
        if(RB4 == 0) return '7';
        if(RB5 == 0) return '8';
        if(RB6 == 0) return '9';
        if(RB7 == 0) return 'C';
        
        PORTB = 0X07;
        if(RB4 == 0) return '*';
        if(RB5 == 0) return '0';
        if(RB6 == 0) return '#';
        if(RB7 == 0) return 'D';
    }
}

void cmd(unsigned char a) {
    RC0 = 0;  // Command mode
    RC1 = 0;
    PORTD = a;
    RC2 = 1;
    for(int i = 0; i <= 100; i++);
    RC2 = 0;
    for(int i = 0; i <= 5000; i++);
}

void data(unsigned char a) {
    RC0 = 1;  // Data mode
    RC1 = 0;
    PORTD = a;
    RC2 = 1;
    for(int i = 0; i <= 100; i++);
    RC2 = 0;
    for(int i = 0; i <= 5000; i++);
}

void display(const char *p) {
    while(*p) {
        data(*p);
        p++;
    }
}